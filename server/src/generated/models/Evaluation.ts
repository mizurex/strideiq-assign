
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Evaluation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Evaluation
 * 
 */
export type EvaluationModel = runtime.Types.Result.DefaultSelection<Prisma.$EvaluationPayload>

export type AggregateEvaluation = {
  _count: EvaluationCountAggregateOutputType | null
  _min: EvaluationMinAggregateOutputType | null
  _max: EvaluationMaxAggregateOutputType | null
}

export type EvaluationMinAggregateOutputType = {
  id: string | null
  orgId: string | null
  expense: string | null
  createdAt: Date | null
}

export type EvaluationMaxAggregateOutputType = {
  id: string | null
  orgId: string | null
  expense: string | null
  createdAt: Date | null
}

export type EvaluationCountAggregateOutputType = {
  id: number
  orgId: number
  expense: number
  matchedRules: number
  actions: number
  trace: number
  createdAt: number
  _all: number
}


export type EvaluationMinAggregateInputType = {
  id?: true
  orgId?: true
  expense?: true
  createdAt?: true
}

export type EvaluationMaxAggregateInputType = {
  id?: true
  orgId?: true
  expense?: true
  createdAt?: true
}

export type EvaluationCountAggregateInputType = {
  id?: true
  orgId?: true
  expense?: true
  matchedRules?: true
  actions?: true
  trace?: true
  createdAt?: true
  _all?: true
}

export type EvaluationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Evaluation to aggregate.
   */
  where?: Prisma.EvaluationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Evaluations to fetch.
   */
  orderBy?: Prisma.EvaluationOrderByWithRelationInput | Prisma.EvaluationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EvaluationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Evaluations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Evaluations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Evaluations
  **/
  _count?: true | EvaluationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EvaluationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EvaluationMaxAggregateInputType
}

export type GetEvaluationAggregateType<T extends EvaluationAggregateArgs> = {
      [P in keyof T & keyof AggregateEvaluation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEvaluation[P]>
    : Prisma.GetScalarType<T[P], AggregateEvaluation[P]>
}




export type EvaluationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EvaluationWhereInput
  orderBy?: Prisma.EvaluationOrderByWithAggregationInput | Prisma.EvaluationOrderByWithAggregationInput[]
  by: Prisma.EvaluationScalarFieldEnum[] | Prisma.EvaluationScalarFieldEnum
  having?: Prisma.EvaluationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EvaluationCountAggregateInputType | true
  _min?: EvaluationMinAggregateInputType
  _max?: EvaluationMaxAggregateInputType
}

export type EvaluationGroupByOutputType = {
  id: string
  orgId: string
  expense: string
  matchedRules: string[]
  actions: string[]
  trace: runtime.JsonValue
  createdAt: Date
  _count: EvaluationCountAggregateOutputType | null
  _min: EvaluationMinAggregateOutputType | null
  _max: EvaluationMaxAggregateOutputType | null
}

type GetEvaluationGroupByPayload<T extends EvaluationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EvaluationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EvaluationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EvaluationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EvaluationGroupByOutputType[P]>
      }
    >
  >



export type EvaluationWhereInput = {
  AND?: Prisma.EvaluationWhereInput | Prisma.EvaluationWhereInput[]
  OR?: Prisma.EvaluationWhereInput[]
  NOT?: Prisma.EvaluationWhereInput | Prisma.EvaluationWhereInput[]
  id?: Prisma.StringFilter<"Evaluation"> | string
  orgId?: Prisma.StringFilter<"Evaluation"> | string
  expense?: Prisma.StringFilter<"Evaluation"> | string
  matchedRules?: Prisma.StringNullableListFilter<"Evaluation">
  actions?: Prisma.StringNullableListFilter<"Evaluation">
  trace?: Prisma.JsonFilter<"Evaluation">
  createdAt?: Prisma.DateTimeFilter<"Evaluation"> | Date | string
}

export type EvaluationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  expense?: Prisma.SortOrder
  matchedRules?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  trace?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EvaluationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EvaluationWhereInput | Prisma.EvaluationWhereInput[]
  OR?: Prisma.EvaluationWhereInput[]
  NOT?: Prisma.EvaluationWhereInput | Prisma.EvaluationWhereInput[]
  orgId?: Prisma.StringFilter<"Evaluation"> | string
  expense?: Prisma.StringFilter<"Evaluation"> | string
  matchedRules?: Prisma.StringNullableListFilter<"Evaluation">
  actions?: Prisma.StringNullableListFilter<"Evaluation">
  trace?: Prisma.JsonFilter<"Evaluation">
  createdAt?: Prisma.DateTimeFilter<"Evaluation"> | Date | string
}, "id">

export type EvaluationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  expense?: Prisma.SortOrder
  matchedRules?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  trace?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.EvaluationCountOrderByAggregateInput
  _max?: Prisma.EvaluationMaxOrderByAggregateInput
  _min?: Prisma.EvaluationMinOrderByAggregateInput
}

export type EvaluationScalarWhereWithAggregatesInput = {
  AND?: Prisma.EvaluationScalarWhereWithAggregatesInput | Prisma.EvaluationScalarWhereWithAggregatesInput[]
  OR?: Prisma.EvaluationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EvaluationScalarWhereWithAggregatesInput | Prisma.EvaluationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Evaluation"> | string
  orgId?: Prisma.StringWithAggregatesFilter<"Evaluation"> | string
  expense?: Prisma.StringWithAggregatesFilter<"Evaluation"> | string
  matchedRules?: Prisma.StringNullableListFilter<"Evaluation">
  actions?: Prisma.StringNullableListFilter<"Evaluation">
  trace?: Prisma.JsonWithAggregatesFilter<"Evaluation">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Evaluation"> | Date | string
}

export type EvaluationCreateInput = {
  id?: string
  orgId: string
  expense: string
  matchedRules?: Prisma.EvaluationCreatematchedRulesInput | string[]
  actions?: Prisma.EvaluationCreateactionsInput | string[]
  trace: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type EvaluationUncheckedCreateInput = {
  id?: string
  orgId: string
  expense: string
  matchedRules?: Prisma.EvaluationCreatematchedRulesInput | string[]
  actions?: Prisma.EvaluationCreateactionsInput | string[]
  trace: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type EvaluationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  expense?: Prisma.StringFieldUpdateOperationsInput | string
  matchedRules?: Prisma.EvaluationUpdatematchedRulesInput | string[]
  actions?: Prisma.EvaluationUpdateactionsInput | string[]
  trace?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EvaluationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  expense?: Prisma.StringFieldUpdateOperationsInput | string
  matchedRules?: Prisma.EvaluationUpdatematchedRulesInput | string[]
  actions?: Prisma.EvaluationUpdateactionsInput | string[]
  trace?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EvaluationCreateManyInput = {
  id?: string
  orgId: string
  expense: string
  matchedRules?: Prisma.EvaluationCreatematchedRulesInput | string[]
  actions?: Prisma.EvaluationCreateactionsInput | string[]
  trace: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
}

export type EvaluationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  expense?: Prisma.StringFieldUpdateOperationsInput | string
  matchedRules?: Prisma.EvaluationUpdatematchedRulesInput | string[]
  actions?: Prisma.EvaluationUpdateactionsInput | string[]
  trace?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EvaluationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  expense?: Prisma.StringFieldUpdateOperationsInput | string
  matchedRules?: Prisma.EvaluationUpdatematchedRulesInput | string[]
  actions?: Prisma.EvaluationUpdateactionsInput | string[]
  trace?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EvaluationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  expense?: Prisma.SortOrder
  matchedRules?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  trace?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EvaluationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  expense?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EvaluationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  expense?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EvaluationCreatematchedRulesInput = {
  set: string[]
}

export type EvaluationCreateactionsInput = {
  set: string[]
}

export type EvaluationUpdatematchedRulesInput = {
  set?: string[]
  push?: string | string[]
}

export type EvaluationUpdateactionsInput = {
  set?: string[]
  push?: string | string[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type EvaluationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orgId?: boolean
  expense?: boolean
  matchedRules?: boolean
  actions?: boolean
  trace?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["evaluation"]>

export type EvaluationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orgId?: boolean
  expense?: boolean
  matchedRules?: boolean
  actions?: boolean
  trace?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["evaluation"]>

export type EvaluationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orgId?: boolean
  expense?: boolean
  matchedRules?: boolean
  actions?: boolean
  trace?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["evaluation"]>

export type EvaluationSelectScalar = {
  id?: boolean
  orgId?: boolean
  expense?: boolean
  matchedRules?: boolean
  actions?: boolean
  trace?: boolean
  createdAt?: boolean
}

export type EvaluationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "orgId" | "expense" | "matchedRules" | "actions" | "trace" | "createdAt", ExtArgs["result"]["evaluation"]>

export type $EvaluationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Evaluation"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    orgId: string
    expense: string
    matchedRules: string[]
    actions: string[]
    trace: runtime.JsonValue
    createdAt: Date
  }, ExtArgs["result"]["evaluation"]>
  composites: {}
}

export type EvaluationGetPayload<S extends boolean | null | undefined | EvaluationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EvaluationPayload, S>

export type EvaluationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EvaluationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EvaluationCountAggregateInputType | true
  }

export interface EvaluationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Evaluation'], meta: { name: 'Evaluation' } }
  /**
   * Find zero or one Evaluation that matches the filter.
   * @param {EvaluationFindUniqueArgs} args - Arguments to find a Evaluation
   * @example
   * // Get one Evaluation
   * const evaluation = await prisma.evaluation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EvaluationFindUniqueArgs>(args: Prisma.SelectSubset<T, EvaluationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EvaluationClient<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Evaluation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EvaluationFindUniqueOrThrowArgs} args - Arguments to find a Evaluation
   * @example
   * // Get one Evaluation
   * const evaluation = await prisma.evaluation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EvaluationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EvaluationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EvaluationClient<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Evaluation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EvaluationFindFirstArgs} args - Arguments to find a Evaluation
   * @example
   * // Get one Evaluation
   * const evaluation = await prisma.evaluation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EvaluationFindFirstArgs>(args?: Prisma.SelectSubset<T, EvaluationFindFirstArgs<ExtArgs>>): Prisma.Prisma__EvaluationClient<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Evaluation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EvaluationFindFirstOrThrowArgs} args - Arguments to find a Evaluation
   * @example
   * // Get one Evaluation
   * const evaluation = await prisma.evaluation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EvaluationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EvaluationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EvaluationClient<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Evaluations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EvaluationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Evaluations
   * const evaluations = await prisma.evaluation.findMany()
   * 
   * // Get first 10 Evaluations
   * const evaluations = await prisma.evaluation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const evaluationWithIdOnly = await prisma.evaluation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EvaluationFindManyArgs>(args?: Prisma.SelectSubset<T, EvaluationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Evaluation.
   * @param {EvaluationCreateArgs} args - Arguments to create a Evaluation.
   * @example
   * // Create one Evaluation
   * const Evaluation = await prisma.evaluation.create({
   *   data: {
   *     // ... data to create a Evaluation
   *   }
   * })
   * 
   */
  create<T extends EvaluationCreateArgs>(args: Prisma.SelectSubset<T, EvaluationCreateArgs<ExtArgs>>): Prisma.Prisma__EvaluationClient<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Evaluations.
   * @param {EvaluationCreateManyArgs} args - Arguments to create many Evaluations.
   * @example
   * // Create many Evaluations
   * const evaluation = await prisma.evaluation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EvaluationCreateManyArgs>(args?: Prisma.SelectSubset<T, EvaluationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Evaluations and returns the data saved in the database.
   * @param {EvaluationCreateManyAndReturnArgs} args - Arguments to create many Evaluations.
   * @example
   * // Create many Evaluations
   * const evaluation = await prisma.evaluation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Evaluations and only return the `id`
   * const evaluationWithIdOnly = await prisma.evaluation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EvaluationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EvaluationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Evaluation.
   * @param {EvaluationDeleteArgs} args - Arguments to delete one Evaluation.
   * @example
   * // Delete one Evaluation
   * const Evaluation = await prisma.evaluation.delete({
   *   where: {
   *     // ... filter to delete one Evaluation
   *   }
   * })
   * 
   */
  delete<T extends EvaluationDeleteArgs>(args: Prisma.SelectSubset<T, EvaluationDeleteArgs<ExtArgs>>): Prisma.Prisma__EvaluationClient<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Evaluation.
   * @param {EvaluationUpdateArgs} args - Arguments to update one Evaluation.
   * @example
   * // Update one Evaluation
   * const evaluation = await prisma.evaluation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EvaluationUpdateArgs>(args: Prisma.SelectSubset<T, EvaluationUpdateArgs<ExtArgs>>): Prisma.Prisma__EvaluationClient<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Evaluations.
   * @param {EvaluationDeleteManyArgs} args - Arguments to filter Evaluations to delete.
   * @example
   * // Delete a few Evaluations
   * const { count } = await prisma.evaluation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EvaluationDeleteManyArgs>(args?: Prisma.SelectSubset<T, EvaluationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Evaluations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EvaluationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Evaluations
   * const evaluation = await prisma.evaluation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EvaluationUpdateManyArgs>(args: Prisma.SelectSubset<T, EvaluationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Evaluations and returns the data updated in the database.
   * @param {EvaluationUpdateManyAndReturnArgs} args - Arguments to update many Evaluations.
   * @example
   * // Update many Evaluations
   * const evaluation = await prisma.evaluation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Evaluations and only return the `id`
   * const evaluationWithIdOnly = await prisma.evaluation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EvaluationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EvaluationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Evaluation.
   * @param {EvaluationUpsertArgs} args - Arguments to update or create a Evaluation.
   * @example
   * // Update or create a Evaluation
   * const evaluation = await prisma.evaluation.upsert({
   *   create: {
   *     // ... data to create a Evaluation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Evaluation we want to update
   *   }
   * })
   */
  upsert<T extends EvaluationUpsertArgs>(args: Prisma.SelectSubset<T, EvaluationUpsertArgs<ExtArgs>>): Prisma.Prisma__EvaluationClient<runtime.Types.Result.GetResult<Prisma.$EvaluationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Evaluations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EvaluationCountArgs} args - Arguments to filter Evaluations to count.
   * @example
   * // Count the number of Evaluations
   * const count = await prisma.evaluation.count({
   *   where: {
   *     // ... the filter for the Evaluations we want to count
   *   }
   * })
  **/
  count<T extends EvaluationCountArgs>(
    args?: Prisma.Subset<T, EvaluationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EvaluationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Evaluation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EvaluationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EvaluationAggregateArgs>(args: Prisma.Subset<T, EvaluationAggregateArgs>): Prisma.PrismaPromise<GetEvaluationAggregateType<T>>

  /**
   * Group by Evaluation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EvaluationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EvaluationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EvaluationGroupByArgs['orderBy'] }
      : { orderBy?: EvaluationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EvaluationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEvaluationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Evaluation model
 */
readonly fields: EvaluationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Evaluation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EvaluationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Evaluation model
 */
export interface EvaluationFieldRefs {
  readonly id: Prisma.FieldRef<"Evaluation", 'String'>
  readonly orgId: Prisma.FieldRef<"Evaluation", 'String'>
  readonly expense: Prisma.FieldRef<"Evaluation", 'String'>
  readonly matchedRules: Prisma.FieldRef<"Evaluation", 'String[]'>
  readonly actions: Prisma.FieldRef<"Evaluation", 'String[]'>
  readonly trace: Prisma.FieldRef<"Evaluation", 'Json'>
  readonly createdAt: Prisma.FieldRef<"Evaluation", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Evaluation findUnique
 */
export type EvaluationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * Filter, which Evaluation to fetch.
   */
  where: Prisma.EvaluationWhereUniqueInput
}

/**
 * Evaluation findUniqueOrThrow
 */
export type EvaluationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * Filter, which Evaluation to fetch.
   */
  where: Prisma.EvaluationWhereUniqueInput
}

/**
 * Evaluation findFirst
 */
export type EvaluationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * Filter, which Evaluation to fetch.
   */
  where?: Prisma.EvaluationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Evaluations to fetch.
   */
  orderBy?: Prisma.EvaluationOrderByWithRelationInput | Prisma.EvaluationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Evaluations.
   */
  cursor?: Prisma.EvaluationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Evaluations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Evaluations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Evaluations.
   */
  distinct?: Prisma.EvaluationScalarFieldEnum | Prisma.EvaluationScalarFieldEnum[]
}

/**
 * Evaluation findFirstOrThrow
 */
export type EvaluationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * Filter, which Evaluation to fetch.
   */
  where?: Prisma.EvaluationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Evaluations to fetch.
   */
  orderBy?: Prisma.EvaluationOrderByWithRelationInput | Prisma.EvaluationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Evaluations.
   */
  cursor?: Prisma.EvaluationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Evaluations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Evaluations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Evaluations.
   */
  distinct?: Prisma.EvaluationScalarFieldEnum | Prisma.EvaluationScalarFieldEnum[]
}

/**
 * Evaluation findMany
 */
export type EvaluationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * Filter, which Evaluations to fetch.
   */
  where?: Prisma.EvaluationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Evaluations to fetch.
   */
  orderBy?: Prisma.EvaluationOrderByWithRelationInput | Prisma.EvaluationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Evaluations.
   */
  cursor?: Prisma.EvaluationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Evaluations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Evaluations.
   */
  skip?: number
  distinct?: Prisma.EvaluationScalarFieldEnum | Prisma.EvaluationScalarFieldEnum[]
}

/**
 * Evaluation create
 */
export type EvaluationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * The data needed to create a Evaluation.
   */
  data: Prisma.XOR<Prisma.EvaluationCreateInput, Prisma.EvaluationUncheckedCreateInput>
}

/**
 * Evaluation createMany
 */
export type EvaluationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Evaluations.
   */
  data: Prisma.EvaluationCreateManyInput | Prisma.EvaluationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Evaluation createManyAndReturn
 */
export type EvaluationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * The data used to create many Evaluations.
   */
  data: Prisma.EvaluationCreateManyInput | Prisma.EvaluationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Evaluation update
 */
export type EvaluationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * The data needed to update a Evaluation.
   */
  data: Prisma.XOR<Prisma.EvaluationUpdateInput, Prisma.EvaluationUncheckedUpdateInput>
  /**
   * Choose, which Evaluation to update.
   */
  where: Prisma.EvaluationWhereUniqueInput
}

/**
 * Evaluation updateMany
 */
export type EvaluationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Evaluations.
   */
  data: Prisma.XOR<Prisma.EvaluationUpdateManyMutationInput, Prisma.EvaluationUncheckedUpdateManyInput>
  /**
   * Filter which Evaluations to update
   */
  where?: Prisma.EvaluationWhereInput
  /**
   * Limit how many Evaluations to update.
   */
  limit?: number
}

/**
 * Evaluation updateManyAndReturn
 */
export type EvaluationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * The data used to update Evaluations.
   */
  data: Prisma.XOR<Prisma.EvaluationUpdateManyMutationInput, Prisma.EvaluationUncheckedUpdateManyInput>
  /**
   * Filter which Evaluations to update
   */
  where?: Prisma.EvaluationWhereInput
  /**
   * Limit how many Evaluations to update.
   */
  limit?: number
}

/**
 * Evaluation upsert
 */
export type EvaluationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * The filter to search for the Evaluation to update in case it exists.
   */
  where: Prisma.EvaluationWhereUniqueInput
  /**
   * In case the Evaluation found by the `where` argument doesn't exist, create a new Evaluation with this data.
   */
  create: Prisma.XOR<Prisma.EvaluationCreateInput, Prisma.EvaluationUncheckedCreateInput>
  /**
   * In case the Evaluation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EvaluationUpdateInput, Prisma.EvaluationUncheckedUpdateInput>
}

/**
 * Evaluation delete
 */
export type EvaluationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
  /**
   * Filter which Evaluation to delete.
   */
  where: Prisma.EvaluationWhereUniqueInput
}

/**
 * Evaluation deleteMany
 */
export type EvaluationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Evaluations to delete
   */
  where?: Prisma.EvaluationWhereInput
  /**
   * Limit how many Evaluations to delete.
   */
  limit?: number
}

/**
 * Evaluation without action
 */
export type EvaluationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evaluation
   */
  select?: Prisma.EvaluationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evaluation
   */
  omit?: Prisma.EvaluationOmit<ExtArgs> | null
}
