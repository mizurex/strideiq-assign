
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Rule` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Rule
 * 
 */
export type RuleModel = runtime.Types.Result.DefaultSelection<Prisma.$RulePayload>

export type AggregateRule = {
  _count: RuleCountAggregateOutputType | null
  _avg: RuleAvgAggregateOutputType | null
  _sum: RuleSumAggregateOutputType | null
  _min: RuleMinAggregateOutputType | null
  _max: RuleMaxAggregateOutputType | null
}

export type RuleAvgAggregateOutputType = {
  priority: number | null
}

export type RuleSumAggregateOutputType = {
  priority: number | null
}

export type RuleMinAggregateOutputType = {
  id: string | null
  orgId: string | null
  name: string | null
  priority: number | null
  active: boolean | null
}

export type RuleMaxAggregateOutputType = {
  id: string | null
  orgId: string | null
  name: string | null
  priority: number | null
  active: boolean | null
}

export type RuleCountAggregateOutputType = {
  id: number
  orgId: number
  name: number
  conditions: number
  actions: number
  priority: number
  active: number
  _all: number
}


export type RuleAvgAggregateInputType = {
  priority?: true
}

export type RuleSumAggregateInputType = {
  priority?: true
}

export type RuleMinAggregateInputType = {
  id?: true
  orgId?: true
  name?: true
  priority?: true
  active?: true
}

export type RuleMaxAggregateInputType = {
  id?: true
  orgId?: true
  name?: true
  priority?: true
  active?: true
}

export type RuleCountAggregateInputType = {
  id?: true
  orgId?: true
  name?: true
  conditions?: true
  actions?: true
  priority?: true
  active?: true
  _all?: true
}

export type RuleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Rule to aggregate.
   */
  where?: Prisma.RuleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rules to fetch.
   */
  orderBy?: Prisma.RuleOrderByWithRelationInput | Prisma.RuleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RuleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Rules
  **/
  _count?: true | RuleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RuleAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RuleSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RuleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RuleMaxAggregateInputType
}

export type GetRuleAggregateType<T extends RuleAggregateArgs> = {
      [P in keyof T & keyof AggregateRule]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRule[P]>
    : Prisma.GetScalarType<T[P], AggregateRule[P]>
}




export type RuleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RuleWhereInput
  orderBy?: Prisma.RuleOrderByWithAggregationInput | Prisma.RuleOrderByWithAggregationInput[]
  by: Prisma.RuleScalarFieldEnum[] | Prisma.RuleScalarFieldEnum
  having?: Prisma.RuleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RuleCountAggregateInputType | true
  _avg?: RuleAvgAggregateInputType
  _sum?: RuleSumAggregateInputType
  _min?: RuleMinAggregateInputType
  _max?: RuleMaxAggregateInputType
}

export type RuleGroupByOutputType = {
  id: string
  orgId: string
  name: string
  conditions: runtime.JsonValue
  actions: string[]
  priority: number
  active: boolean
  _count: RuleCountAggregateOutputType | null
  _avg: RuleAvgAggregateOutputType | null
  _sum: RuleSumAggregateOutputType | null
  _min: RuleMinAggregateOutputType | null
  _max: RuleMaxAggregateOutputType | null
}

type GetRuleGroupByPayload<T extends RuleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RuleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RuleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RuleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RuleGroupByOutputType[P]>
      }
    >
  >



export type RuleWhereInput = {
  AND?: Prisma.RuleWhereInput | Prisma.RuleWhereInput[]
  OR?: Prisma.RuleWhereInput[]
  NOT?: Prisma.RuleWhereInput | Prisma.RuleWhereInput[]
  id?: Prisma.StringFilter<"Rule"> | string
  orgId?: Prisma.StringFilter<"Rule"> | string
  name?: Prisma.StringFilter<"Rule"> | string
  conditions?: Prisma.JsonFilter<"Rule">
  actions?: Prisma.StringNullableListFilter<"Rule">
  priority?: Prisma.IntFilter<"Rule"> | number
  active?: Prisma.BoolFilter<"Rule"> | boolean
}

export type RuleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  conditions?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  active?: Prisma.SortOrder
}

export type RuleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.RuleWhereInput | Prisma.RuleWhereInput[]
  OR?: Prisma.RuleWhereInput[]
  NOT?: Prisma.RuleWhereInput | Prisma.RuleWhereInput[]
  orgId?: Prisma.StringFilter<"Rule"> | string
  name?: Prisma.StringFilter<"Rule"> | string
  conditions?: Prisma.JsonFilter<"Rule">
  actions?: Prisma.StringNullableListFilter<"Rule">
  priority?: Prisma.IntFilter<"Rule"> | number
  active?: Prisma.BoolFilter<"Rule"> | boolean
}, "id">

export type RuleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  conditions?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  active?: Prisma.SortOrder
  _count?: Prisma.RuleCountOrderByAggregateInput
  _avg?: Prisma.RuleAvgOrderByAggregateInput
  _max?: Prisma.RuleMaxOrderByAggregateInput
  _min?: Prisma.RuleMinOrderByAggregateInput
  _sum?: Prisma.RuleSumOrderByAggregateInput
}

export type RuleScalarWhereWithAggregatesInput = {
  AND?: Prisma.RuleScalarWhereWithAggregatesInput | Prisma.RuleScalarWhereWithAggregatesInput[]
  OR?: Prisma.RuleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RuleScalarWhereWithAggregatesInput | Prisma.RuleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Rule"> | string
  orgId?: Prisma.StringWithAggregatesFilter<"Rule"> | string
  name?: Prisma.StringWithAggregatesFilter<"Rule"> | string
  conditions?: Prisma.JsonWithAggregatesFilter<"Rule">
  actions?: Prisma.StringNullableListFilter<"Rule">
  priority?: Prisma.IntWithAggregatesFilter<"Rule"> | number
  active?: Prisma.BoolWithAggregatesFilter<"Rule"> | boolean
}

export type RuleCreateInput = {
  id?: string
  orgId: string
  name: string
  conditions: Prisma.JsonNullValueInput | runtime.InputJsonValue
  actions?: Prisma.RuleCreateactionsInput | string[]
  priority: number
  active?: boolean
}

export type RuleUncheckedCreateInput = {
  id?: string
  orgId: string
  name: string
  conditions: Prisma.JsonNullValueInput | runtime.InputJsonValue
  actions?: Prisma.RuleCreateactionsInput | string[]
  priority: number
  active?: boolean
}

export type RuleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conditions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  actions?: Prisma.RuleUpdateactionsInput | string[]
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type RuleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conditions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  actions?: Prisma.RuleUpdateactionsInput | string[]
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type RuleCreateManyInput = {
  id?: string
  orgId: string
  name: string
  conditions: Prisma.JsonNullValueInput | runtime.InputJsonValue
  actions?: Prisma.RuleCreateactionsInput | string[]
  priority: number
  active?: boolean
}

export type RuleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conditions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  actions?: Prisma.RuleUpdateactionsInput | string[]
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type RuleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conditions?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  actions?: Prisma.RuleUpdateactionsInput | string[]
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  active?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type RuleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  conditions?: Prisma.SortOrder
  actions?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  active?: Prisma.SortOrder
}

export type RuleAvgOrderByAggregateInput = {
  priority?: Prisma.SortOrder
}

export type RuleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  active?: Prisma.SortOrder
}

export type RuleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  active?: Prisma.SortOrder
}

export type RuleSumOrderByAggregateInput = {
  priority?: Prisma.SortOrder
}

export type RuleCreateactionsInput = {
  set: string[]
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type RuleUpdateactionsInput = {
  set?: string[]
  push?: string | string[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}



export type RuleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orgId?: boolean
  name?: boolean
  conditions?: boolean
  actions?: boolean
  priority?: boolean
  active?: boolean
}, ExtArgs["result"]["rule"]>

export type RuleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orgId?: boolean
  name?: boolean
  conditions?: boolean
  actions?: boolean
  priority?: boolean
  active?: boolean
}, ExtArgs["result"]["rule"]>

export type RuleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orgId?: boolean
  name?: boolean
  conditions?: boolean
  actions?: boolean
  priority?: boolean
  active?: boolean
}, ExtArgs["result"]["rule"]>

export type RuleSelectScalar = {
  id?: boolean
  orgId?: boolean
  name?: boolean
  conditions?: boolean
  actions?: boolean
  priority?: boolean
  active?: boolean
}

export type RuleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "orgId" | "name" | "conditions" | "actions" | "priority" | "active", ExtArgs["result"]["rule"]>

export type $RulePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Rule"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    orgId: string
    name: string
    conditions: runtime.JsonValue
    actions: string[]
    priority: number
    active: boolean
  }, ExtArgs["result"]["rule"]>
  composites: {}
}

export type RuleGetPayload<S extends boolean | null | undefined | RuleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RulePayload, S>

export type RuleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RuleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RuleCountAggregateInputType | true
  }

export interface RuleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rule'], meta: { name: 'Rule' } }
  /**
   * Find zero or one Rule that matches the filter.
   * @param {RuleFindUniqueArgs} args - Arguments to find a Rule
   * @example
   * // Get one Rule
   * const rule = await prisma.rule.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RuleFindUniqueArgs>(args: Prisma.SelectSubset<T, RuleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RuleClient<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Rule that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RuleFindUniqueOrThrowArgs} args - Arguments to find a Rule
   * @example
   * // Get one Rule
   * const rule = await prisma.rule.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RuleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RuleClient<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Rule that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuleFindFirstArgs} args - Arguments to find a Rule
   * @example
   * // Get one Rule
   * const rule = await prisma.rule.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RuleFindFirstArgs>(args?: Prisma.SelectSubset<T, RuleFindFirstArgs<ExtArgs>>): Prisma.Prisma__RuleClient<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Rule that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuleFindFirstOrThrowArgs} args - Arguments to find a Rule
   * @example
   * // Get one Rule
   * const rule = await prisma.rule.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RuleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RuleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RuleClient<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Rules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Rules
   * const rules = await prisma.rule.findMany()
   * 
   * // Get first 10 Rules
   * const rules = await prisma.rule.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ruleWithIdOnly = await prisma.rule.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RuleFindManyArgs>(args?: Prisma.SelectSubset<T, RuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Rule.
   * @param {RuleCreateArgs} args - Arguments to create a Rule.
   * @example
   * // Create one Rule
   * const Rule = await prisma.rule.create({
   *   data: {
   *     // ... data to create a Rule
   *   }
   * })
   * 
   */
  create<T extends RuleCreateArgs>(args: Prisma.SelectSubset<T, RuleCreateArgs<ExtArgs>>): Prisma.Prisma__RuleClient<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Rules.
   * @param {RuleCreateManyArgs} args - Arguments to create many Rules.
   * @example
   * // Create many Rules
   * const rule = await prisma.rule.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RuleCreateManyArgs>(args?: Prisma.SelectSubset<T, RuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Rules and returns the data saved in the database.
   * @param {RuleCreateManyAndReturnArgs} args - Arguments to create many Rules.
   * @example
   * // Create many Rules
   * const rule = await prisma.rule.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Rules and only return the `id`
   * const ruleWithIdOnly = await prisma.rule.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends RuleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, RuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Rule.
   * @param {RuleDeleteArgs} args - Arguments to delete one Rule.
   * @example
   * // Delete one Rule
   * const Rule = await prisma.rule.delete({
   *   where: {
   *     // ... filter to delete one Rule
   *   }
   * })
   * 
   */
  delete<T extends RuleDeleteArgs>(args: Prisma.SelectSubset<T, RuleDeleteArgs<ExtArgs>>): Prisma.Prisma__RuleClient<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Rule.
   * @param {RuleUpdateArgs} args - Arguments to update one Rule.
   * @example
   * // Update one Rule
   * const rule = await prisma.rule.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RuleUpdateArgs>(args: Prisma.SelectSubset<T, RuleUpdateArgs<ExtArgs>>): Prisma.Prisma__RuleClient<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Rules.
   * @param {RuleDeleteManyArgs} args - Arguments to filter Rules to delete.
   * @example
   * // Delete a few Rules
   * const { count } = await prisma.rule.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RuleDeleteManyArgs>(args?: Prisma.SelectSubset<T, RuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Rules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Rules
   * const rule = await prisma.rule.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RuleUpdateManyArgs>(args: Prisma.SelectSubset<T, RuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Rules and returns the data updated in the database.
   * @param {RuleUpdateManyAndReturnArgs} args - Arguments to update many Rules.
   * @example
   * // Update many Rules
   * const rule = await prisma.rule.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Rules and only return the `id`
   * const ruleWithIdOnly = await prisma.rule.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends RuleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, RuleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Rule.
   * @param {RuleUpsertArgs} args - Arguments to update or create a Rule.
   * @example
   * // Update or create a Rule
   * const rule = await prisma.rule.upsert({
   *   create: {
   *     // ... data to create a Rule
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Rule we want to update
   *   }
   * })
   */
  upsert<T extends RuleUpsertArgs>(args: Prisma.SelectSubset<T, RuleUpsertArgs<ExtArgs>>): Prisma.Prisma__RuleClient<runtime.Types.Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Rules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuleCountArgs} args - Arguments to filter Rules to count.
   * @example
   * // Count the number of Rules
   * const count = await prisma.rule.count({
   *   where: {
   *     // ... the filter for the Rules we want to count
   *   }
   * })
  **/
  count<T extends RuleCountArgs>(
    args?: Prisma.Subset<T, RuleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RuleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Rule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RuleAggregateArgs>(args: Prisma.Subset<T, RuleAggregateArgs>): Prisma.PrismaPromise<GetRuleAggregateType<T>>

  /**
   * Group by Rule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RuleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RuleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RuleGroupByArgs['orderBy'] }
      : { orderBy?: RuleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Rule model
 */
readonly fields: RuleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Rule.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RuleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Rule model
 */
export interface RuleFieldRefs {
  readonly id: Prisma.FieldRef<"Rule", 'String'>
  readonly orgId: Prisma.FieldRef<"Rule", 'String'>
  readonly name: Prisma.FieldRef<"Rule", 'String'>
  readonly conditions: Prisma.FieldRef<"Rule", 'Json'>
  readonly actions: Prisma.FieldRef<"Rule", 'String[]'>
  readonly priority: Prisma.FieldRef<"Rule", 'Int'>
  readonly active: Prisma.FieldRef<"Rule", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Rule findUnique
 */
export type RuleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * Filter, which Rule to fetch.
   */
  where: Prisma.RuleWhereUniqueInput
}

/**
 * Rule findUniqueOrThrow
 */
export type RuleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * Filter, which Rule to fetch.
   */
  where: Prisma.RuleWhereUniqueInput
}

/**
 * Rule findFirst
 */
export type RuleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * Filter, which Rule to fetch.
   */
  where?: Prisma.RuleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rules to fetch.
   */
  orderBy?: Prisma.RuleOrderByWithRelationInput | Prisma.RuleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Rules.
   */
  cursor?: Prisma.RuleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Rules.
   */
  distinct?: Prisma.RuleScalarFieldEnum | Prisma.RuleScalarFieldEnum[]
}

/**
 * Rule findFirstOrThrow
 */
export type RuleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * Filter, which Rule to fetch.
   */
  where?: Prisma.RuleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rules to fetch.
   */
  orderBy?: Prisma.RuleOrderByWithRelationInput | Prisma.RuleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Rules.
   */
  cursor?: Prisma.RuleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Rules.
   */
  distinct?: Prisma.RuleScalarFieldEnum | Prisma.RuleScalarFieldEnum[]
}

/**
 * Rule findMany
 */
export type RuleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * Filter, which Rules to fetch.
   */
  where?: Prisma.RuleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Rules to fetch.
   */
  orderBy?: Prisma.RuleOrderByWithRelationInput | Prisma.RuleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Rules.
   */
  cursor?: Prisma.RuleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Rules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Rules.
   */
  skip?: number
  distinct?: Prisma.RuleScalarFieldEnum | Prisma.RuleScalarFieldEnum[]
}

/**
 * Rule create
 */
export type RuleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * The data needed to create a Rule.
   */
  data: Prisma.XOR<Prisma.RuleCreateInput, Prisma.RuleUncheckedCreateInput>
}

/**
 * Rule createMany
 */
export type RuleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Rules.
   */
  data: Prisma.RuleCreateManyInput | Prisma.RuleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Rule createManyAndReturn
 */
export type RuleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * The data used to create many Rules.
   */
  data: Prisma.RuleCreateManyInput | Prisma.RuleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Rule update
 */
export type RuleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * The data needed to update a Rule.
   */
  data: Prisma.XOR<Prisma.RuleUpdateInput, Prisma.RuleUncheckedUpdateInput>
  /**
   * Choose, which Rule to update.
   */
  where: Prisma.RuleWhereUniqueInput
}

/**
 * Rule updateMany
 */
export type RuleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Rules.
   */
  data: Prisma.XOR<Prisma.RuleUpdateManyMutationInput, Prisma.RuleUncheckedUpdateManyInput>
  /**
   * Filter which Rules to update
   */
  where?: Prisma.RuleWhereInput
  /**
   * Limit how many Rules to update.
   */
  limit?: number
}

/**
 * Rule updateManyAndReturn
 */
export type RuleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * The data used to update Rules.
   */
  data: Prisma.XOR<Prisma.RuleUpdateManyMutationInput, Prisma.RuleUncheckedUpdateManyInput>
  /**
   * Filter which Rules to update
   */
  where?: Prisma.RuleWhereInput
  /**
   * Limit how many Rules to update.
   */
  limit?: number
}

/**
 * Rule upsert
 */
export type RuleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * The filter to search for the Rule to update in case it exists.
   */
  where: Prisma.RuleWhereUniqueInput
  /**
   * In case the Rule found by the `where` argument doesn't exist, create a new Rule with this data.
   */
  create: Prisma.XOR<Prisma.RuleCreateInput, Prisma.RuleUncheckedCreateInput>
  /**
   * In case the Rule was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RuleUpdateInput, Prisma.RuleUncheckedUpdateInput>
}

/**
 * Rule delete
 */
export type RuleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
  /**
   * Filter which Rule to delete.
   */
  where: Prisma.RuleWhereUniqueInput
}

/**
 * Rule deleteMany
 */
export type RuleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Rules to delete
   */
  where?: Prisma.RuleWhereInput
  /**
   * Limit how many Rules to delete.
   */
  limit?: number
}

/**
 * Rule without action
 */
export type RuleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Rule
   */
  select?: Prisma.RuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Rule
   */
  omit?: Prisma.RuleOmit<ExtArgs> | null
}
